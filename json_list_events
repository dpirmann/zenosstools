#!/usr/bin/perl

#=============================================================================
# json_list_events
#=============================================================================

sub usage {
    print <<EOF;
$0: Lists events from the zenoss event console.
Usage: $0 ...

Arguments = 
\tstate=[new,acknowledged,suppressed,closed,cleared,aged,all] (default=new)
\tfields=[any available field] (default=a useful selection)
\tsev=[5,4,3,2,1,0] (default=4)(minimum severity to print)
\tprodState=[device prodstate] (default=Pre-Production)
\tevclass=[some event class, e.g. /Status/Ping] (default=no filter)
\tdeviceclass=[some device class] (default=no filter)
\thost=[a hostname] (default=no filter)
\tgroup=[a device group] (default=no filter)
\tsystem=[a device system] (default=no filter)
\thelp (this help)
\tlistfields (list available event fields)
\tprintjson=(yes|no) (default=no)
\tdebug=debugging output on
EOF
exit;

}

use JSON::Parse ':all';
require 'zapi_toolkit.pl';

$debug=0; #or see debug argument

#define alert states - used to convert text to values
my %alertstates=&zapi_toolkit::get_valid_values('getAlertStates');
my %prodstates=&zapi_toolkit::get_valid_values('getProductionStates');

# set up values and their defaults 
my %args;
$args{'state'}='new';  
$args{'sev'}='4'; #minimum sev to print.
$args{'fields'}="/firstTime,/count,/dedupid,/device/text,/details/grname,/count,/summary,/severity,/eventClass/text";
$args{'prodState'}='Pre-Production';

# process the arguments
while (my $arg=shift) {
    &usage if ($arg eq 'help');
    &listfields if ($arg eq 'listfields');
    if ($arg eq 'debug') {
	$debug=1;
	next;
    }
    foreach my $x ('state','fields','sev','prodstate','evclass','deviceclass','host','group','system','help','printjson','debug') {
	if ($arg=~/^${x}=/) {
	    ($args{$x}) = ($arg =~ /${x}=(.+)/); 
	}
    }
}

#Lookup value for the prod state name and store in %args
if (defined $prodstates{$args{'prodstate'}}) { 
    $args{'prodstateval'}= $prodstates{$args{'prodstate'}};
}

#handle case of wanting to see all types
if ($args{'state'} eq "all") {
    $args{'state'}="new,acknowledged,suppressed,closed,cleared,aged";
}

#figure out which alertstates we asked for by name and make a nice list
my @astate;
foreach $x (split(/,/,$args{'state'})) {
    push @astate, $alertstates{$x};
}
$args{'astate'}=join(',',@astate);

#process fields into an array and also make a hash with flags of what to print later
my %pfields;
my $fieldcount=0;
foreach my $x (split(/,/,$args{'fields'})) {
    unless ($x =~ /^\//) { $x = "/" . $x; } #add leading /
    $fieldcount++;
    $pfields{$x}++;
}
$fieldcount++ if (defined $pfields{'/all'});

#find hostpath if we gave arg host.
my $hostpath;
if (defined $args{'host'}) {
    $args{'hostpath'}=&zapi_toolkit::gethostuid($args{'host'});
}

#debug arg dump---------------------------------------------------------------------
if ($debug) {
    foreach $x (sort keys %args) {
	print "ARRRRRG $x $args{$x}\n";
    }
}

#---------------------------------------------------------------------------------
#create the query and run it with limit 0 to find out how many events are in the database.

my @data; my @dataparams;

push @data,qq("uid":"$args{'hostpath'}") if (defined $args{'host'});
push @data,qq("uid":"/zport/dmd/Groups$args{'group'}") if (defined $args{'group'});
push @dataparams, qq("eventClass":"$args{'evclass'}") if (defined $args{'evclass'});
push @dataparams, qq("eventState":[$args{'astate'}]) if ($args{'astate'}>=0);
####push @dataparams, qq("severity":[]) if .. want to include sev but need to make it into a list. punt for now

my $dataparams=join ',', @dataparams; $dataparams=qq("params":{$dataparams});
print "dataparams=$dataparams\n" if ($debug);

push @data,$dataparams;

my $data=join (',', @data); $data=qq({$data,"limit":LIMITX,"start":STARTX});

my $qdata=$data;
$qdata=~ s/LIMITX/0/;
$qdata=~ s/STARTX/0/;

print "datacount=$qdata\n" if ($debug);

my $output = &zapi_toolkit::zcurlpost("evconsole_router","EventsRouter","query",$qdata);
my $parsed=parse_json($output);
my $total=%$parsed->{'result'}->{'totalCount'};
print "Total=$total\n" if ($debug);

my $ll=100;
for (my $jj=0;$jj<$total;$jj=$jj+$ll) {

    print "This starts at block=$jj\n" if ($debug);

    $qdata=$data;
    $qdata=~ s/LIMITX/$ll/;
    $qdata=~ s/STARTX/$jj/;

    print "data=$qdata\n" if ($debug);

    my $output = &zapi_toolkit::zcurlpost("evconsole_router","EventsRouter","query",$qdata);
    my $parsed=parse_json($output);
    my $tt=@{%$parsed->{'result'}->{'events'}};

    for (my $ev=0;$ev<$tt;$ev++) {
	my %ear=&zapi_toolkit::recurseParse("",$parsed->{result}->{events}[$ev],%ear);
	if (defined $args{'sev'}) {
	    next unless ($ear{'/severity'}>=$args{'sev'});
	}
	if (defined $args{'prodstateval'}) {
	    next unless ($ear{'/details/zenoss.device.production_state'} >= $args{'prodstateval'});
	}
	if (defined $args{'evclass'}) {
	    next unless ($ear{'/eventClass/text'} eq $args{'evclass'});
	}
	if (defined $args{'deviceclass'}) {
	    my $tmp=$ear{'/details/zenoss.device.device_class'};
	    next unless ($args{'deviceclass'} =~ /$tmp/i);
	}
	if (defined $args{'host'}) {
	    next unless ($ear{'/device/uid'} eq $args{'hostpath'});
	}
	if (defined $args{'group'}) {
	    next unless ($ear{'/details/grname'} eq $args{'group'});
	}
	if (defined $args{'system'}) {
	    my $tmp=$ear{'/details/zenoss.device.systems'};
	    next unless ($args{'system'} =~ /$tmp/i);
	}
	
	if ($args{'printjson'}=~/yes/i) {
	    my @json;
	    if (defined $pfields{'/all'}) {
		foreach my $x (sort keys %ear) { $ear{$x}=~s/\\//g; push @json, qq("$x":"$ear{$x}"); }
	    } else {
		foreach my $x (sort keys %pfields) { next if ($x eq '/all'); $ear{$x}=~s/\\//g; push @json, qq("$x":"$ear{$x}"); }
	    }
	    print "{" . join(",",@json) . "}\n";
	} else {
	    if (defined $pfields{'/all'}) {
		foreach my $x (sort keys %ear) { print qq($x: $ear{$x}\n); }
	    } else {
		foreach my $x (sort keys %pfields) { next if ($x eq '/all'); print qq($x: $ear{$x}\n); }
	    }
	    print "------------------------------------------------\n" if ($fieldcount>1);
	}
    }

}



sub listfields {
    print <<EFO;
Field names may include the following:

/0/DeviceClass/name, /0/DeviceClass/uid, /0/DeviceGroups/name,
/0/DeviceGroups/uid, /0/Location/name, /0/Location/uid,
/0/Systems/name, /0/Systems/uid, /agent, /clearid, /component/text,
/component/uid, /component/url, /component/uuid, /count, /dedupid,
/details/current, /details/description, /details/deviceuuid,
/details/grname, /details/how, /details/isManageIp, /details/manager,
/details/max, /details/sclass, /details/uuid,
/details/zenoss.device.device_class, /details/zenoss.device.groups,
/details/zenoss.device.ip_address, /details/zenoss.device.location,
/details/zenoss.device.priority,
/details/zenoss.device.production_state,
/details/zenoss.device.systems, /DeviceClass, /DeviceGroups,
/DevicePriority, /device/text, /device/uid, /device/url, /device/uuid,
/eventClassKey, /eventClassMapping, /eventClass/text, /eventClass/uid,
/eventGroup, /eventKey, /eventState, /evid, /facility, /firstTime,
/id, /ipAddress, /lastTime, /Location, /message, /monitor, /ntevid,
/ownerid, /priority, /prodState, /severity, /stateChange, /summary,
EFO
exit;
}
