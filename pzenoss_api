#!/usr/bin/perl

#=============================================================================
# pzenoss_api
#
# By David Pirmann. This script is an interface to the JSON API exposed by the
# "Zenoss Core" product from www.zenoss.org. 
#
# See README and the project WIKI on above GITHUB site for more details.
#
# This script is hereby released under GNU General Public License version 2
# See http://www.gnu.org/licenses/gpl-2.0.html for details.
#=============================================================================

sub usage {
print <<EOF;

pzenoss_api is a basic interface to the Zenoss JSON API. It is a perl 
reimplemation of an existing bash zenoss_api script.

Syntax: pzenoss_api "endpoint" "action" "method" "data"

Examples:

pzenoss_api device_router DeviceRouter getProductionStates '{}'
pzenoss_api device_router DeviceRouter getDeviceUids '"{"uid":"/zport/dmd/Devices/Server/Linux"}'

See: http://wiki.zenoss.org/Working_with_the_JSON_API for more examples
EOF

exit;
}

#requirements - 
# * unix utility "curl"
# * Perl module JSON::Parse
#set up
# * edit "ZENBASE", "ZAPIUSER", and "ZAPIPASS" vars.

#zapiuser/zapipass - user/pass to use the zenoss api.
my $ZAPIUSER = 'apiuser';
my $ZAPIPASS = 'zapiuser';

#zenbase is the URL to your zenoss implementation
my $ZENBASE  = "http://$ZAPIUSER:$ZAPIPASS\@zenoss:8080";

use JSON::Parse ':all';
use Data::Dumper;
use LWP::UserAgent;

#parse our arguments
my $ROUTER_ENDPOINT=shift;
my $ROUTER_ACTION=shift;
my $ROUTER_METHOD=shift;
my $DATA=shift;

unless ($ROUTER_ENDPOINT && $ROUTER_ACTION && $ROUTER_METHOD && $DATA) {
    &usage;
}


print "Endpoint = $ROUTER_ENDPOINT\n";
print "Action   = $ROUTER_ACTION\n";
print "Method   = $ROUTER_METHOD\n";
print "Data     = $DATA\n";


my $output = zcurlpost($ROUTER_ENDPOINT,$ROUTER_ACTION,$ROUTER_METHOD,$DATA);
my $parsed=parse_json($output);
print Dumper($parsed);
print "\n";	

exit;


#=============================================================================
# Function ZCURLPOST
# Used to use system("curl") but now uses LWP::UserAgent
# zcurlpost <endpoint> <action> <method> <data>
# uses ZENBASE, ZAPIUSER, and ZAPIPASS variables
#=============================================================================
sub zcurlpost {
    my ($ROUTER_ENDPOINT,$ROUTER_ACTION,$ROUTER_METHOD,$DATA) = @_;

    my $server_endpoint = "$ZENBASE/zport/dmd/$ROUTER_ENDPOINT";
    my $post_data = qq({"action":"$ROUTER_ACTION","method":"$ROUTER_METHOD","data":[$DATA],"tid":1});

    # create request, and set custom HTTP request header fields
    my $req = HTTP::Request->new(POST => $server_endpoint);
    $req->header('content-type' => 'application/json');
    $req->content($post_data);

    # create connection and send over request
    # the ssl options are in case you're running Zenoss 5 which has a self signed cert by default
    my $ua = LWP::UserAgent->new(ssl_opts => {SSL_verify_mode => IO::Socket::SSL::SSL_VERIFY_NONE,
                                              verify_hostname => 0, });
    push @{ $ua->requests_redirectable }, 'POST'; #follow 302 and other redirect

    my $resp = $ua->request($req);

    if ($resp->is_success) {
        my $message = $resp->decoded_content;
        #print "Received reply: $message\n";
        return ($message);
    }
    else {
        print "HTTP POST error code: ", $resp->code, "\n";
        print "HTTP POST error message: ", $resp->message, "\n";
        die;
    }
}
