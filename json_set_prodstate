#!/usr/bin/perl

#=============================================================================
# json_set_prodstate
#
# By David Pirmann. This script is an interface to the JSON API exposed by the
# "Zenoss Core" product from www.zenoss.org. This script requires "zapi_toolkit" 
# from https://github.com/dpirmann/zenosstools
# See README and the project WIKI on above GITHUB site for more details.
#
# This script is hereby released under GNU General Public License version 2
# See http://www.gnu.org/licenses/gpl-2.0.html for details.
#=============================================================================

#=============================================================================
sub usage {
    print <<EFO;

$0: Change a host\'s prod state or priority in Zenoss
Usage: $0 [prodstate|priority]=value [hostname or ip....list]
       $0 [prodstate|priority]=list (lists available values)

Note: to see existing prodstates and priorities, use json_get_info
      perl json_get_info hostname /priorityLabel
      perl json_get_info hostname /productionStateLabel

EFO
exit;

}
#=============================================================================

use JSON::Parse ':all';
require 'zapi_toolkit.pl';

$debug=0;
$debugold=0;

my $action; my $value; my @hostarray;my $zaction;

while (my $option=shift) {
    if ($option =~ /^(prodstate|priority)=/i) {
	($action, $value) = split (/=/, $option);
    } else {
	push @hostarray, $option;
    }
}

print "Action = $action\n" if ($debug);
print "Value  = $value\n" if ($debug);

my $get_action; my $set_action;
if ($action =~ /^prodstate$/i) {
    $get_action='getProductionStates';
    $set_action='productionState';
} elsif ($action =~ /^priority$/i) {
    $get_action='getPriorities';
    $set_action='priority';
} else {
    print "Oops. Needs action of prodstate or priority\n";
    &usage;
}

my %valarry=&zapi_toolkit::get_valid_values($get_action);

if ($value =~ /^list$/i) {
    print "Valid values for action $action:\n";
    foreach $x (sort keys %valarry) {
	print "\t$x ($valarry{$x})\n";
    }
    exit;
}

unless ($action && $value && (scalar @hostarray>0)) {
    &usage;
    die "Don't seem to have all the necessary arguments.\n";
}

foreach my $host (sort @hostarray) {

    #find out the /zport/dmd/host/path for the given host argument
    my $hostpath=&zapi_toolkit::gethostuid($host);
    unless ($hostpath=~ m|/zport/dmd|) {
        print STDERR "Host $host not found.\n";
	next;
    }

    &update_value($set_action,$hostpath,$valarry{$value});
}


sub update_value {
    my ($zaction,$uid,$value) = @_;

    my $data = qq({"uid":"$uid","$zaction":$value});
    my $output = &zapi_toolkit::zcurlpost("device_router","DeviceRouter","setInfo", $data);
    my ($retval,$msg) = &zapi_toolkit::catchJsonErrors($output);
    if ($retval) {
        print "${uid}, error: ${msg}\n";
    } else {
        print "${uid}, success\n";
    }
}


exit;








