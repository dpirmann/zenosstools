#!/usr/bin/perl

#=============================================================================
# json_set_collector
#
# By David Pirmann. This script is an interface to the JSON API exposed by the
# "Zenoss Core" product from www.zenoss.org. This script requires "zapi_toolkit" 
# from https://github.com/dpirmann/zenosstools
# See README and the project WIKI on above GITHUB site for more details.
#
# This script is hereby released under GNU General Public License version 2
# See http://www.gnu.org/licenses/gpl-2.0.html for details.
#=============================================================================

#=============================================================================
sub usage {
    print "$0: Update the Zenoss Remote Collector for an existing host\n";
    print "Usage: $0 newcollector host-or-ip [host-or-ip....]\n";
    exit;
}
#=============================================================================

use JSON::Parse ':all';
require 'zapi_toolkit.pl';

$debug=0;
$debugold=0;

my $newcollector=shift;

#figure out if $newcollector is a collector....
my @collectors=&zapi_toolkit::getCollectorList;

if ($newcollector eq "list") {
    print join "\n", @collectors;
    print "\n";
    exit;
}

unless (grep (/^${newcollector}$/, @collectors)) {
    print "No such collector '$newcollector' found in Zenoss.\n";
    exit;
}

while (my $host=shift) {
    my $hostpath=&zapi_toolkit::gethostuid($host);
    unless ($hostpath =~ m|/zport/dmd/|) {
	print STDERR "Host $host not found.\n";
	next;
    }

    print "Host $host found at $hostpath, proceeding\n\n"  if ($debug);

    my $data=qq({"uids":["$hostpath"],"hashcheck":"","collector":"$newcollector","moveData":true});
    my $output = &zapi_toolkit::zcurlpost("device_router","DeviceRouter","setCollector",$data);
    my ($retval,$msg) = &ZenossPerl::catchJsonErrors($output);
    if ($retval) {
        print STDERR "${hostpath}, error: ${msg}\n";
    } else {
        print "${hostpath}, success\n";
    }

}

exit;

